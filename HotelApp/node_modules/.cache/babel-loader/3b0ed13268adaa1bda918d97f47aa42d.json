{"remainingRequest":"C:\\Users\\takum\\Documents\\hokuriku_tosbac\\HotelApp\\project\\HotelApp\\HotelApp\\node_modules\\thread-loader\\dist\\cjs.js!C:\\Users\\takum\\Documents\\hokuriku_tosbac\\HotelApp\\project\\HotelApp\\HotelApp\\node_modules\\babel-loader\\lib\\index.js!C:\\Users\\takum\\Documents\\hokuriku_tosbac\\HotelApp\\project\\HotelApp\\HotelApp\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!C:\\Users\\takum\\Documents\\hokuriku_tosbac\\HotelApp\\project\\HotelApp\\HotelApp\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\takum\\Documents\\hokuriku_tosbac\\HotelApp\\project\\HotelApp\\HotelApp\\src\\pages\\Login.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\Users\\takum\\Documents\\hokuriku_tosbac\\HotelApp\\project\\HotelApp\\HotelApp\\src\\pages\\Login.vue","mtime":1604504489048},{"path":"C:\\Users\\takum\\Documents\\hokuriku_tosbac\\HotelApp\\project\\HotelApp\\HotelApp\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\takum\\Documents\\hokuriku_tosbac\\HotelApp\\project\\HotelApp\\HotelApp\\node_modules\\thread-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\takum\\Documents\\hokuriku_tosbac\\HotelApp\\project\\HotelApp\\HotelApp\\node_modules\\babel-loader\\lib\\index.js","mtime":315532800000},{"path":"C:\\Users\\takum\\Documents\\hokuriku_tosbac\\HotelApp\\project\\HotelApp\\HotelApp\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\takum\\Documents\\hokuriku_tosbac\\HotelApp\\project\\HotelApp\\HotelApp\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport login from '@/js/status/login.js';\nimport url from '@/js/api_url.js';\nexport default {\n  name: 'login',\n  data: function data() {\n    return {\n      login: {\n        companyID: \"\",\n        memberID: \"\",\n        password: \"\"\n      },\n      validation: {\n        companyID: [{\n          required: true,\n          message: '会社IDが入力されていません',\n          trigger: 'blur'\n        }],\n        memberID: [{\n          required: true,\n          message: '社員IDが入力されていません',\n          trigger: 'blur'\n        }],\n        password: [{\n          required: true,\n          message: 'パスワードが入力されていません',\n          trigger: 'blur'\n        }]\n      }\n    };\n  },\n  methods: {\n    submitForm: function submitForm() {\n      var _this = this;\n\n      this.$refs['loginForm'].validate(function (valid) {\n        if (valid) {\n          _this.loginCheck();\n        }\n      });\n    },\n    loginCheck: function loginCheck() {\n      var _this2 = this;\n\n      //urlは違うやつ\n      axios.get(url.ApiUrl().Login([{\n        key: \"CompanyCode\",\n        value: this.login.companyID\n      }, {\n        key: \"MemberCode\",\n        value: this.login.memberID\n      }, {\n        key: \"Password\",\n        value: this.login.password\n      }])).then(function (response) {\n        console.log(response.data);\n\n        if (response.data.IsLogin) {\n          var member = response.data.Member;\n          login.login(_this2, {\n            userID: member.MemberID,\n            userName: member.MemberName,\n            userPass: member.Password,\n            companyID: member.CompanyID,\n            role: member.RoleID,\n            loggedIn: true\n          });\n\n          _this2.$router.push('/uedaunyu/');\n        } else {\n          _this2.$message({\n            message: '会社ID、社員ID又はパスワードが違います',\n            type: 'error'\n          });\n        }\n      }).catch(function (response) {\n        console.log(response);\n\n        _this2.$message({\n          message: '通信に失敗しました',\n          type: 'error'\n        });\n      });\n    }\n  }\n};",{"version":3,"sources":["Login.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA4CA,OAAA,KAAA,MAAA,sBAAA;AACA,OAAA,GAAA,MAAA,iBAAA;AAEA,eAAA;AACA,QAAA,OADA;AAEA,QAAA,gBAAA;AAEA,WAAA;AACA,aAAA;AACA,mBAAA,EADA;AAEA,kBAAA,EAFA;AAGA,kBAAA;AAHA,OADA;AAMA,kBAAA;AACA,mBAAA,CACA;AAAA,oBAAA,IAAA;AAAA,mBAAA,gBAAA;AAAA,mBAAA;AAAA,SADA,CADA;AAIA,kBAAA,CACA;AAAA,oBAAA,IAAA;AAAA,mBAAA,gBAAA;AAAA,mBAAA;AAAA,SADA,CAJA;AAOA,kBAAA,CACA;AAAA,oBAAA,IAAA;AAAA,mBAAA,iBAAA;AAAA,mBAAA;AAAA,SADA;AAPA;AANA,KAAA;AAkBA,GAtBA;AAuBA,WAAA;AACA,gBAAA,sBAAA;AAAA;;AACA,WAAA,KAAA,CAAA,WAAA,EAAA,QAAA,CAAA,UAAA,KAAA,EAAA;AAEA,YAAA,KAAA,EAAA;AAEA,gBAAA,UAAA;AACA;AACA,OANA;AAQA,KAVA;AAWA,gBAAA,sBAAA;AAAA;;AAEA;AAEA,YAAA,GAAA,CAAA,IAAA,MAAA,GAAA,KAAA,CAAA,CAAA;AAAA,aAAA,aAAA;AAAA,eAAA,KAAA,KAAA,CAAA;AAAA,OAAA,EAAA;AAAA,aAAA,YAAA;AAAA,eAAA,KAAA,KAAA,CAAA;AAAA,OAAA,EAAA;AAAA,aAAA,UAAA;AAAA,eAAA,KAAA,KAAA,CAAA;AAAA,OAAA,CAAA,CAAA,EACA,IADA,CACA,oBAAA;AAEA,gBAAA,GAAA,CAAA,SAAA,IAAA;;AACA,YAAA,SAAA,IAAA,CAAA,OAAA,EAAA;AAEA,cAAA,SAAA,SAAA,IAAA,CAAA,MAAA;AACA,gBAAA,KAAA,CAAA,MAAA,EAAA;AAAA,oBAAA,OAAA,QAAA;AAAA,sBAAA,OAAA,UAAA;AAAA,sBAAA,OAAA,QAAA;AAAA,uBAAA,OAAA,SAAA;AAAA,kBAAA,OAAA,MAAA;AAAA,sBAAA;AAAA,WAAA;;AAIA,iBAAA,OAAA,CAAA,IAAA,CAAA,YAAA;AACA,SARA,MAQA;AACA,iBAAA,QAAA,CAAA;AACA,qBAAA,uBADA;AAEA,kBAAA;AAFA,WAAA;AAKA;AACA,OAnBA,EAoBA,KApBA,CAoBA,oBAAA;AACA,gBAAA,GAAA,CAAA,QAAA;;AACA,eAAA,QAAA,CAAA;AACA,mBAAA,WADA;AAEA,gBAAA;AAFA,SAAA;AAKA,OA3BA;AA6BA;AA5CA;AAvBA,CAAA","sourcesContent":["<template>\r\n\r\n    <el-card>\r\n        <div slot='header'>\r\n            <span>ログイン</span>\r\n        </div>\r\n        <div slot='default'>\r\n            <el-form :model=\"login\" :rules=\"validation\" ref=\"loginForm\" label-width=\"120px\" class=\"demo-ruleForm\">\r\n                <div class='row'>\r\n                    <div class='col-md-12'>\r\n                        <el-form-item label=\"会社ID\" prop=\"companyID\">\r\n                            <el-input v-model=\"login.companyID\"\r\n                                      style=\"width:40%;\"></el-input>\r\n                        </el-form-item>\r\n                    </div>\r\n                    <div class='col-md-12'>\r\n                        <el-form-item label=\"社員ID\" prop=\"memberID\">\r\n                            <el-input v-model=\"login.memberID\"\r\n                                      style=\"width:40%;\"></el-input>\r\n                        </el-form-item>\r\n                    </div>\r\n                    <div class='col-md-12'>\r\n                        <el-form-item label=\"パスワード\" prop=\"password\">\r\n                            <el-input v-model=\"login.password\"\r\n                                      style=\"width:40%;\"></el-input>\r\n                        </el-form-item>\r\n                    </div>\r\n                </div>\r\n            </el-form>\r\n\r\n            <div class='row'>\r\n                <div class='col-md-12'>\r\n                    <div style='text-align:right;width:100%;'>\r\n                        <el-button style='margin-right:3%;' type='primary' @click=\"submitForm()\">ログイン</el-button>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            \r\n        </div>\r\n    </el-card>\r\n\r\n</template>\r\n\r\n<script>\r\n    import login from '@/js/status/login.js'\r\n    import url from '@/js/api_url.js'\r\n\r\n    export default {\r\n        name: 'login',\r\n        data: function () {\r\n\r\n            return {\r\n                login: {\r\n                    companyID: \"\",\r\n                    memberID: \"\",\r\n                    password: \"\",\r\n                },\r\n                validation: {\r\n                    companyID: [\r\n                        { required: true, message: '会社IDが入力されていません', trigger: 'blur' },\r\n                    ],\r\n                    memberID: [\r\n                        { required: true, message: '社員IDが入力されていません', trigger: 'blur' },\r\n                    ],\r\n                    password: [\r\n                        { required: true, message: 'パスワードが入力されていません', trigger: 'blur' },\r\n                    ],\r\n                }\r\n            }\r\n        },\r\n        methods: {\r\n            submitForm: function () {\r\n                this.$refs['loginForm'].validate((valid) => {\r\n\r\n                    if (valid) {\r\n\r\n                        this.loginCheck();\r\n                    } \r\n                });\r\n\r\n            },\r\n            loginCheck: function () {\r\n\r\n                //urlは違うやつ\r\n\r\n                axios.get(url.ApiUrl().Login([{ key: \"CompanyCode\", value: this.login.companyID }, { key: \"MemberCode\", value: this.login.memberID }, { key: \"Password\", value: this.login.password }]))\r\n                    .then(response => {\r\n\r\n                        console.log(response.data);\r\n                        if (response.data.IsLogin) {\r\n\r\n                            var member = response.data.Member;\r\n                            login.login(this, { userID: member.MemberID, userName: member.MemberName, userPass: member.Password, companyID: member.CompanyID, role: member.RoleID, loggedIn: true });\r\n\r\n\r\n\r\n                            this.$router.push('/uedaunyu/');\r\n                        } else {\r\n                            this.$message({\r\n                                message: '会社ID、社員ID又はパスワードが違います',\r\n                                type: 'error'\r\n                            });\r\n\r\n                        }\r\n                    })\r\n                    .catch(response => {\r\n                        console.log(response);\r\n                        this.$message({\r\n                            message: '通信に失敗しました',\r\n                            type: 'error'\r\n                        });\r\n\r\n                    })\r\n                \r\n            }\r\n        },\r\n\r\n    }\r\n</script>\r\n\r\n<style scoped>\r\n</style>"],"sourceRoot":"src/pages"}]}