{"remainingRequest":"C:\\Users\\takum\\Documents\\hokuriku_tosbac\\HotelApp\\project\\HotelApp\\HotelApp\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\takum\\Documents\\hokuriku_tosbac\\HotelApp\\project\\HotelApp\\HotelApp\\src\\pages\\Login.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\Users\\takum\\Documents\\hokuriku_tosbac\\HotelApp\\project\\HotelApp\\HotelApp\\src\\pages\\Login.vue","mtime":1604504489048},{"path":"C:\\Users\\takum\\Documents\\hokuriku_tosbac\\HotelApp\\project\\HotelApp\\HotelApp\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\takum\\Documents\\hokuriku_tosbac\\HotelApp\\project\\HotelApp\\HotelApp\\node_modules\\babel-loader\\lib\\index.js","mtime":315532800000},{"path":"C:\\Users\\takum\\Documents\\hokuriku_tosbac\\HotelApp\\project\\HotelApp\\HotelApp\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\takum\\Documents\\hokuriku_tosbac\\HotelApp\\project\\HotelApp\\HotelApp\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport login from '@/js/status/login.js'\nimport url from '@/js/api_url.js'\n\nexport default {\n    name: 'login',\n    data: function () {\n\n        return {\n            login: {\n                companyID: \"\",\n                memberID: \"\",\n                password: \"\",\n            },\n            validation: {\n                companyID: [\n                    { required: true, message: '会社IDが入力されていません', trigger: 'blur' },\n                ],\n                memberID: [\n                    { required: true, message: '社員IDが入力されていません', trigger: 'blur' },\n                ],\n                password: [\n                    { required: true, message: 'パスワードが入力されていません', trigger: 'blur' },\n                ],\n            }\n        }\n    },\n    methods: {\n        submitForm: function () {\n            this.$refs['loginForm'].validate((valid) => {\n\n                if (valid) {\n\n                    this.loginCheck();\n                } \n            });\n\n        },\n        loginCheck: function () {\n\n            //urlは違うやつ\n\n            axios.get(url.ApiUrl().Login([{ key: \"CompanyCode\", value: this.login.companyID }, { key: \"MemberCode\", value: this.login.memberID }, { key: \"Password\", value: this.login.password }]))\n                .then(response => {\n\n                    console.log(response.data);\n                    if (response.data.IsLogin) {\n\n                        var member = response.data.Member;\n                        login.login(this, { userID: member.MemberID, userName: member.MemberName, userPass: member.Password, companyID: member.CompanyID, role: member.RoleID, loggedIn: true });\n\n\n\n                        this.$router.push('/uedaunyu/');\n                    } else {\n                        this.$message({\n                            message: '会社ID、社員ID又はパスワードが違います',\n                            type: 'error'\n                        });\n\n                    }\n                })\n                .catch(response => {\n                    console.log(response);\n                    this.$message({\n                        message: '通信に失敗しました',\n                        type: 'error'\n                    });\n\n                })\n            \n        }\n    },\n\n}\n",{"version":3,"sources":["Login.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA4CA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;;;AAIA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA","file":"Login.vue","sourceRoot":"src/pages","sourcesContent":["<template>\r\n\r\n    <el-card>\r\n        <div slot='header'>\r\n            <span>ログイン</span>\r\n        </div>\r\n        <div slot='default'>\r\n            <el-form :model=\"login\" :rules=\"validation\" ref=\"loginForm\" label-width=\"120px\" class=\"demo-ruleForm\">\r\n                <div class='row'>\r\n                    <div class='col-md-12'>\r\n                        <el-form-item label=\"会社ID\" prop=\"companyID\">\r\n                            <el-input v-model=\"login.companyID\"\r\n                                      style=\"width:40%;\"></el-input>\r\n                        </el-form-item>\r\n                    </div>\r\n                    <div class='col-md-12'>\r\n                        <el-form-item label=\"社員ID\" prop=\"memberID\">\r\n                            <el-input v-model=\"login.memberID\"\r\n                                      style=\"width:40%;\"></el-input>\r\n                        </el-form-item>\r\n                    </div>\r\n                    <div class='col-md-12'>\r\n                        <el-form-item label=\"パスワード\" prop=\"password\">\r\n                            <el-input v-model=\"login.password\"\r\n                                      style=\"width:40%;\"></el-input>\r\n                        </el-form-item>\r\n                    </div>\r\n                </div>\r\n            </el-form>\r\n\r\n            <div class='row'>\r\n                <div class='col-md-12'>\r\n                    <div style='text-align:right;width:100%;'>\r\n                        <el-button style='margin-right:3%;' type='primary' @click=\"submitForm()\">ログイン</el-button>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            \r\n        </div>\r\n    </el-card>\r\n\r\n</template>\r\n\r\n<script>\r\n    import login from '@/js/status/login.js'\r\n    import url from '@/js/api_url.js'\r\n\r\n    export default {\r\n        name: 'login',\r\n        data: function () {\r\n\r\n            return {\r\n                login: {\r\n                    companyID: \"\",\r\n                    memberID: \"\",\r\n                    password: \"\",\r\n                },\r\n                validation: {\r\n                    companyID: [\r\n                        { required: true, message: '会社IDが入力されていません', trigger: 'blur' },\r\n                    ],\r\n                    memberID: [\r\n                        { required: true, message: '社員IDが入力されていません', trigger: 'blur' },\r\n                    ],\r\n                    password: [\r\n                        { required: true, message: 'パスワードが入力されていません', trigger: 'blur' },\r\n                    ],\r\n                }\r\n            }\r\n        },\r\n        methods: {\r\n            submitForm: function () {\r\n                this.$refs['loginForm'].validate((valid) => {\r\n\r\n                    if (valid) {\r\n\r\n                        this.loginCheck();\r\n                    } \r\n                });\r\n\r\n            },\r\n            loginCheck: function () {\r\n\r\n                //urlは違うやつ\r\n\r\n                axios.get(url.ApiUrl().Login([{ key: \"CompanyCode\", value: this.login.companyID }, { key: \"MemberCode\", value: this.login.memberID }, { key: \"Password\", value: this.login.password }]))\r\n                    .then(response => {\r\n\r\n                        console.log(response.data);\r\n                        if (response.data.IsLogin) {\r\n\r\n                            var member = response.data.Member;\r\n                            login.login(this, { userID: member.MemberID, userName: member.MemberName, userPass: member.Password, companyID: member.CompanyID, role: member.RoleID, loggedIn: true });\r\n\r\n\r\n\r\n                            this.$router.push('/uedaunyu/');\r\n                        } else {\r\n                            this.$message({\r\n                                message: '会社ID、社員ID又はパスワードが違います',\r\n                                type: 'error'\r\n                            });\r\n\r\n                        }\r\n                    })\r\n                    .catch(response => {\r\n                        console.log(response);\r\n                        this.$message({\r\n                            message: '通信に失敗しました',\r\n                            type: 'error'\r\n                        });\r\n\r\n                    })\r\n                \r\n            }\r\n        },\r\n\r\n    }\r\n</script>\r\n\r\n<style scoped>\r\n</style>"]}]}