{"remainingRequest":"C:\\Users\\takum\\Documents\\hokuriku_tosbac\\HotelApp\\project\\HotelApp\\HotelApp\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\takum\\Documents\\hokuriku_tosbac\\HotelApp\\project\\HotelApp\\HotelApp\\src\\components\\IncrementSearch.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\Users\\takum\\Documents\\hokuriku_tosbac\\HotelApp\\project\\HotelApp\\HotelApp\\src\\components\\IncrementSearch.vue","mtime":1603695681696},{"path":"C:\\Users\\takum\\Documents\\hokuriku_tosbac\\HotelApp\\project\\HotelApp\\HotelApp\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\takum\\Documents\\hokuriku_tosbac\\HotelApp\\project\\HotelApp\\HotelApp\\node_modules\\babel-loader\\lib\\index.js","mtime":315532800000},{"path":"C:\\Users\\takum\\Documents\\hokuriku_tosbac\\HotelApp\\project\\HotelApp\\HotelApp\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\takum\\Documents\\hokuriku_tosbac\\HotelApp\\project\\HotelApp\\HotelApp\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport search from '@/js/search/autocomplete.js'\nimport exsist from '@/js/status/exsist.js'\nimport array from '@/js/array/key_change.js'\nimport url from '@/js/api_url.js'\n\n\nexport default {\n    name: 'el-increment-search',\n    model: {\n        prop: 'code',\n        event: \"change\",\n    },\n    props: {\n        code: {\n            type: String,\n        },\n        autoComplete: {\n            type: Array,\n        },\n        display: {\n            type:Array,\n        },\n        required: {\n            type: Boolean,\n        },\n        kind: {\n            type: String,\n        },\n        disabled: {\n            type: Boolean,\n        },\n        autofocus: {\n            type: Boolean,\n        }\n    },\n    data: function () {\n\n        return {\n            data: { code: null },\n            autoCompleteData: {},\n            querySearchData: [\n            ],\n            placeholder: null,\n            message: {\n                error: \"\",\n            }\n        }\n    },\n    methods: {\n        querySearch: function (queryString, cb) {\n\n            var list = this.querySearchData;\n            var results = queryString ? list.filter(search.createSearchFilter(queryString, \"value\")) : list;\n            // call callback function to return suggestions\n            cb(results);\n        },\n        autocompleteSelect: function (item) {\n\n            for (var i in this.autoComplete) {\n\n                this.autoCompleteData[this.autoComplete[i]] = item[this.autoComplete[i]];\n            }\n\n            this.$emit('change', item.value)\n            this.$emit('update', this.autoCompleteData);\n\n\n        },\n        autocompleteChange: function (value) {\n\n            if (value == \"\") {\n\n                for (var i in this.autoComplete) {\n\n                    this.autoCompleteData[this.autoComplete[i]] = \"\";\n                }\n\n                this.$emit('change', \"\")\n                this.$emit('update', this.autoCompleteData);\n\n\n\n                return false;\n            }\n\n            var result = exsist.is_exsist_by_object_value(value, this.querySearchData, \"value\");\n\n            if (!result) {\n\n                if (this.required) {\n                    alert(this.message.error);\n\n                    for (var i in this.autoComplete) {\n\n                        this.autoCompleteData[this.autoComplete[i]] = \"\";\n                    }\n\n                    this.$emit('change', \"\")\n                    this.$emit('update', this.autoCompleteData);\n\n\n\n                }\n\n                return false;\n            }\n\n            for (var i in this.autoComplete) {\n\n                this.autoCompleteData[this.autoComplete[i]] = result[this.autoComplete[i]];\n            }\n\n            this.$emit('change', value)\n\n            this.$emit('update', this.autoCompleteData);\n\n\n\n        },\n        createValueKey: function (array,codeKey) {\n          \n            for (var i in array) {\n                array[i].value = String(array[i][codeKey]);\n            }\n\n        }\n\n    },\n    created: function () {\n        //今は定数データを入れているがサーバーからaxiosでデータを取ってくる\n\n        if (this.kind == \"商品\") {\n            this.placeholder = \"商品コード\"\n            this.message.error = \"入力したコードの商品は存在しません\";\n\n\n\n\n            axios.get(url.syouhinMaster)\n                .then(response => {\n\n\n                    array.createValueKey(response.data, \"syohinCD\", \"string\");\n\n                    this.querySearchData = response.data;\n\n                    console.log(this.querySearchData);\n\n                })\n                .catch(response => console.log(response))\n\n\n            \n\n        }\n\n    \n        if (this.kind == \"生産者\") {\n            this.placeholder = \"生産者コード\"\n          this.message.error = \"入力したコードの生産者は存在しません\";\n\n            axios.get(url.seisansyaMaster)\n                .then(response => {\n\n                    array.createValueKey(response.data, \"seisansyacd\", \"string\");\n\n                    this.querySearchData = response.data;\n\n\n                })\n                .catch(response => console.log(response))\n\n\n        }\n\n        if (this.kind == \"品種\") {\n            this.placeholder = \"品種コード\"\n           this.message.error = \"入力したコードの品種は存在しません\";\n\n            var data = [\n                { code: \"0\", name: \"三社\" },\n                { code: \"1\", name: \"平核\" },\n            ];\n\n            //codeの部分は本番環境のコードのキーに変える\n            this.createValueKey(data, \"code\");\n\n            this.querySearchData = data;\n\n        }\n\n        if (this.kind == \"等級\") {\n            this.placeholder = \"等級コード\"\n            this.message.error = \"入力したコードの等級は存在しません\";\n\n            var data = [\n                { code: \"0\", name: \"上\" },\n                { code: \"99\", name: \"特上\" },\n                { code: \"2\", name: \"中\" },\n                { code: \"3\", name: \"下\" },\n                { code: \"4\", name: \"特下\" },\n\n            ];\n\n            //codeの部分は本番環境のコードのキーに変える\n            this.createValueKey(data, \"code\");\n\n            this.querySearchData = data;\n\n        }\n\n        if (this.kind == \"支所\") {\n            this.placeholder = \"支所コード\"\n            this.message.error = \"入力したコードの支所は存在しません\";\n\n            axios.get(url.shisyoMaster)\n                .then(response => {\n\n                    array.createValueKey(response.data, \"shisyoCD\", \"string\");\n\n                    this.querySearchData = response.data;\n\n                    this.data.code = this.code;\n\n                    if (this.code != \"\") {\n\n                        this.autocompleteChange(this.data.code);\n                    }\n\n\n                })\n                .catch(response => console.log(response))\n\n        }\n\n\n               if (this.kind == \"サイズ\") {\n            this.placeholder = \"サイズコード\"\n            this.message.error = \"入力したコードのサイズは存在しません\";\n\n            var data = [\n                { code: \"0\", name: \"S\" },\n                { code: \"1\", name: \"L\" },\n                { code: \"2\", name: \"M\" },\n            \n            ];\n\n            //codeの部分は本番環境のコードのキーに変える\n            this.createValueKey(data, \"code\");\n\n            this.querySearchData = data;\n\n        }\n\n\n        if (this.kind == \"市場\") {\n            this.placeholder = \"市場コード\"\n            this.message.error = \"入力したコードの市場は存在しません\";\n\n\n            axios.get(url.shijoMaster)\n                .then(response => {\n\n                    array.createValueKey(response.data, \"shijyoCD\", \"string\");\n\n                    this.querySearchData = response.data;\n\n       \n\n                })\n                .catch(response => console.log(response))\n\n\n        }\n\n        if (this.kind == \"部門\") {\n            this.placeholder = \"部門コード\"\n            this.message.error = \"入力したコードの部門は存在しません\";\n\n            axios.get(url.bumonMaster)\n                .then(response => {\n\n                    array.createValueKey(response.data, \"bumoncd\", \"string\");\n\n                    this.querySearchData = response.data;\n\n\n                })\n                .catch(response => console.log(response))\n\n        }\n\n        if (this.kind == \"包装\") {\n            this.placeholder = \"包装コード\"\n            this.message.error = \"入力したコードの包装は存在しません\";\n\n            axios.get(url.hosoMaster)\n                .then(response => {\n\n                    array.createValueKey(response.data, \"hosoCD\", \"string\");\n\n                    this.querySearchData = response.data;\n\n                    this.data.code = this.code;\n\n                    if (this.code != \"\") {\n\n                        this.autocompleteChange(this.data.code);\n                    }\n\n\n                })\n                .catch(response => console.log(response))\n\n\n        }\n\n        if (this.kind == \"地区\") {\n            this.placeholder = \"地区コード\"\n            this.message.error = \"入力したコードの地区は存在しません\";\n\n            axios.get(url.chikuMaster)\n                .then(response => {\n\n                    array.createValueKey(response.data, \"chikuCD\", \"string\");\n\n                    this.querySearchData = response.data;\n\n                    this.data.code = this.code;\n\n                    if (this.code != \"\") {\n\n                        this.autocompleteChange(this.data.code);\n                    }\n\n\n                })\n                .catch(response => console.log(response))\n\n\n        }\n\n\n\n        if (this.kind == \"資材\") {\n            this.placeholder = \"資材コード\"\n            this.message.error = \"入力したコードの資材は存在しません\";\n\n            axios.get(url.shizaiMaster)\n                .then(response => {\n\n                    array.createValueKey(response.data, \"shizaiCD\", \"string\");\n\n                    this.querySearchData = response.data;\n\n                    this.data.code = this.code;\n\n                    console.log(this.querySearchData);\n\n                    if (this.code != \"\") {\n\n                        this.autocompleteChange(this.data.code);\n                    }\n\n\n                })\n                .catch(response => console.log(response))\n\n\n        }\n\n\n        if (this.kind == \"運賃\") {\n            this.placeholder = \"運賃コード\"\n            this.message.error = \"入力したコードの運賃は存在しません\";\n\n            axios.get(url.unchinMaster)\n                .then(response => {\n\n                    array.createValueKey(response.data, \"unchinCD\", \"string\");\n\n                    this.querySearchData = response.data;\n\n\n                    console.log(this.querySearchData);\n\n                })\n                .catch(response => console.log(response))\n\n\n        }\n\n\n\n    \n    },\n    mounted: function () {\n\n    },\n    watch: {\n        'code': function () {\n            this.data.code = this.code;\n\n\n          }\n\n    },\n}\n",{"version":3,"sources":["IncrementSearch.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;AAkBA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;;;AAGA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA;;;;AAIA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;;;;AAIA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;;;AAIA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;;;;AAKA;AACA;;;AAGA;;AAEA;;AAEA;;AAEA;AACA;;;;;AAKA;;;AAGA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;;;AAGA;AACA;;;AAGA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;;;AAGA;AACA;;AAEA;;;AAGA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;;AAGA;AACA;AACA;;;AAGA;AACA;;AAEA;;AAEA;;;;AAIA;AACA;;;AAGA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;;;AAGA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;;;AAGA;AACA;;;AAGA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;;;AAGA;AACA;;;AAGA;;;;AAIA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;;;AAGA;AACA;;;AAGA;;;AAGA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;;;AAGA;;AAEA;AACA;;;AAGA;;;;;AAKA;AACA;;AAEA;AACA;AACA;AACA;;;AAGA;;AAEA;AACA","file":"IncrementSearch.vue","sourceRoot":"src/components","sourcesContent":["<template>\n        <el-autocomplete style='width:30%; margin-right:2%;'\n                         v-model=\"data.code\"\n                         :fetch-suggestions=\"querySearch\"\n                         :placeholder=\"placeholder\"\n                         :disabled=\"disabled\"\n                         :autofocus=\"autofocus\"\n                         @select=\"autocompleteSelect\"\n                         @change=\"autocompleteChange\">\n            <template slot-scope=\"{ item }\">\n                <div style=\"border-top:solid 0.5px lightgray;\">コード:{{ item.value }}</div>\n                <div v-for=\"display in display\">{{display.name}}:{{ item[display.key] }}</div>\n                <div ></div>\n            </template>\n        </el-autocomplete>\n</template>\n\n<script>\n    import search from '@/js/search/autocomplete.js'\n    import exsist from '@/js/status/exsist.js'\n    import array from '@/js/array/key_change.js'\n    import url from '@/js/api_url.js'\n\n\n    export default {\n        name: 'el-increment-search',\n        model: {\n            prop: 'code',\n            event: \"change\",\n        },\n        props: {\n            code: {\n                type: String,\n            },\n            autoComplete: {\n                type: Array,\n            },\n            display: {\n                type:Array,\n            },\n            required: {\n                type: Boolean,\n            },\n            kind: {\n                type: String,\n            },\n            disabled: {\n                type: Boolean,\n            },\n            autofocus: {\n                type: Boolean,\n            }\n        },\n        data: function () {\n\n            return {\n                data: { code: null },\n                autoCompleteData: {},\n                querySearchData: [\n                ],\n                placeholder: null,\n                message: {\n                    error: \"\",\n                }\n            }\n        },\n        methods: {\n            querySearch: function (queryString, cb) {\n\n                var list = this.querySearchData;\n                var results = queryString ? list.filter(search.createSearchFilter(queryString, \"value\")) : list;\n                // call callback function to return suggestions\n                cb(results);\n            },\n            autocompleteSelect: function (item) {\n\n                for (var i in this.autoComplete) {\n\n                    this.autoCompleteData[this.autoComplete[i]] = item[this.autoComplete[i]];\n                }\n\n                this.$emit('change', item.value)\n                this.$emit('update', this.autoCompleteData);\n\n\n            },\n            autocompleteChange: function (value) {\n\n                if (value == \"\") {\n\n                    for (var i in this.autoComplete) {\n\n                        this.autoCompleteData[this.autoComplete[i]] = \"\";\n                    }\n\n                    this.$emit('change', \"\")\n                    this.$emit('update', this.autoCompleteData);\n\n\n\n                    return false;\n                }\n\n                var result = exsist.is_exsist_by_object_value(value, this.querySearchData, \"value\");\n\n                if (!result) {\n\n                    if (this.required) {\n                        alert(this.message.error);\n\n                        for (var i in this.autoComplete) {\n\n                            this.autoCompleteData[this.autoComplete[i]] = \"\";\n                        }\n\n                        this.$emit('change', \"\")\n                        this.$emit('update', this.autoCompleteData);\n\n\n\n                    }\n\n                    return false;\n                }\n\n                for (var i in this.autoComplete) {\n\n                    this.autoCompleteData[this.autoComplete[i]] = result[this.autoComplete[i]];\n                }\n\n                this.$emit('change', value)\n\n                this.$emit('update', this.autoCompleteData);\n\n\n\n            },\n            createValueKey: function (array,codeKey) {\n              \n                for (var i in array) {\n                    array[i].value = String(array[i][codeKey]);\n                }\n\n            }\n\n        },\n        created: function () {\n            //今は定数データを入れているがサーバーからaxiosでデータを取ってくる\n\n            if (this.kind == \"商品\") {\n                this.placeholder = \"商品コード\"\n                this.message.error = \"入力したコードの商品は存在しません\";\n\n\n\n\n                axios.get(url.syouhinMaster)\n                    .then(response => {\n\n\n                        array.createValueKey(response.data, \"syohinCD\", \"string\");\n\n                        this.querySearchData = response.data;\n\n                        console.log(this.querySearchData);\n\n                    })\n                    .catch(response => console.log(response))\n\n\n                \n\n            }\n\n        \n            if (this.kind == \"生産者\") {\n                this.placeholder = \"生産者コード\"\n              this.message.error = \"入力したコードの生産者は存在しません\";\n\n                axios.get(url.seisansyaMaster)\n                    .then(response => {\n\n                        array.createValueKey(response.data, \"seisansyacd\", \"string\");\n\n                        this.querySearchData = response.data;\n\n \n                    })\n                    .catch(response => console.log(response))\n\n\n            }\n\n            if (this.kind == \"品種\") {\n                this.placeholder = \"品種コード\"\n               this.message.error = \"入力したコードの品種は存在しません\";\n\n                var data = [\n                    { code: \"0\", name: \"三社\" },\n                    { code: \"1\", name: \"平核\" },\n                ];\n\n                //codeの部分は本番環境のコードのキーに変える\n                this.createValueKey(data, \"code\");\n\n                this.querySearchData = data;\n\n            }\n\n            if (this.kind == \"等級\") {\n                this.placeholder = \"等級コード\"\n                this.message.error = \"入力したコードの等級は存在しません\";\n\n                var data = [\n                    { code: \"0\", name: \"上\" },\n                    { code: \"99\", name: \"特上\" },\n                    { code: \"2\", name: \"中\" },\n                    { code: \"3\", name: \"下\" },\n                    { code: \"4\", name: \"特下\" },\n\n                ];\n\n                //codeの部分は本番環境のコードのキーに変える\n                this.createValueKey(data, \"code\");\n\n                this.querySearchData = data;\n\n            }\n\n            if (this.kind == \"支所\") {\n                this.placeholder = \"支所コード\"\n                this.message.error = \"入力したコードの支所は存在しません\";\n\n                axios.get(url.shisyoMaster)\n                    .then(response => {\n\n                        array.createValueKey(response.data, \"shisyoCD\", \"string\");\n\n                        this.querySearchData = response.data;\n\n                        this.data.code = this.code;\n\n                        if (this.code != \"\") {\n\n                            this.autocompleteChange(this.data.code);\n                        }\n\n    \n                    })\n                    .catch(response => console.log(response))\n\n            }\n\n\n                   if (this.kind == \"サイズ\") {\n                this.placeholder = \"サイズコード\"\n                this.message.error = \"入力したコードのサイズは存在しません\";\n\n                var data = [\n                    { code: \"0\", name: \"S\" },\n                    { code: \"1\", name: \"L\" },\n                    { code: \"2\", name: \"M\" },\n                \n                ];\n\n                //codeの部分は本番環境のコードのキーに変える\n                this.createValueKey(data, \"code\");\n\n                this.querySearchData = data;\n\n            }\n\n\n            if (this.kind == \"市場\") {\n                this.placeholder = \"市場コード\"\n                this.message.error = \"入力したコードの市場は存在しません\";\n\n\n                axios.get(url.shijoMaster)\n                    .then(response => {\n\n                        array.createValueKey(response.data, \"shijyoCD\", \"string\");\n\n                        this.querySearchData = response.data;\n\n           \n\n                    })\n                    .catch(response => console.log(response))\n\n\n            }\n\n            if (this.kind == \"部門\") {\n                this.placeholder = \"部門コード\"\n                this.message.error = \"入力したコードの部門は存在しません\";\n\n                axios.get(url.bumonMaster)\n                    .then(response => {\n\n                        array.createValueKey(response.data, \"bumoncd\", \"string\");\n\n                        this.querySearchData = response.data;\n\n\n                    })\n                    .catch(response => console.log(response))\n\n            }\n\n            if (this.kind == \"包装\") {\n                this.placeholder = \"包装コード\"\n                this.message.error = \"入力したコードの包装は存在しません\";\n\n                axios.get(url.hosoMaster)\n                    .then(response => {\n\n                        array.createValueKey(response.data, \"hosoCD\", \"string\");\n\n                        this.querySearchData = response.data;\n\n                        this.data.code = this.code;\n\n                        if (this.code != \"\") {\n\n                            this.autocompleteChange(this.data.code);\n                        }\n\n\n                    })\n                    .catch(response => console.log(response))\n\n\n            }\n\n            if (this.kind == \"地区\") {\n                this.placeholder = \"地区コード\"\n                this.message.error = \"入力したコードの地区は存在しません\";\n\n                axios.get(url.chikuMaster)\n                    .then(response => {\n\n                        array.createValueKey(response.data, \"chikuCD\", \"string\");\n\n                        this.querySearchData = response.data;\n\n                        this.data.code = this.code;\n\n                        if (this.code != \"\") {\n\n                            this.autocompleteChange(this.data.code);\n                        }\n\n\n                    })\n                    .catch(response => console.log(response))\n\n\n            }\n\n\n\n            if (this.kind == \"資材\") {\n                this.placeholder = \"資材コード\"\n                this.message.error = \"入力したコードの資材は存在しません\";\n\n                axios.get(url.shizaiMaster)\n                    .then(response => {\n\n                        array.createValueKey(response.data, \"shizaiCD\", \"string\");\n\n                        this.querySearchData = response.data;\n\n                        this.data.code = this.code;\n\n                        console.log(this.querySearchData);\n\n                        if (this.code != \"\") {\n\n                            this.autocompleteChange(this.data.code);\n                        }\n\n\n                    })\n                    .catch(response => console.log(response))\n\n\n            }\n\n\n            if (this.kind == \"運賃\") {\n                this.placeholder = \"運賃コード\"\n                this.message.error = \"入力したコードの運賃は存在しません\";\n\n                axios.get(url.unchinMaster)\n                    .then(response => {\n\n                        array.createValueKey(response.data, \"unchinCD\", \"string\");\n\n                        this.querySearchData = response.data;\n\n\n                        console.log(this.querySearchData);\n\n                    })\n                    .catch(response => console.log(response))\n\n\n            }\n\n\n\n        \n        },\n        mounted: function () {\n\n        },\n        watch: {\n            'code': function () {\n                this.data.code = this.code;\n\n\n              }\n   \n        },\n    }\n</script>\n\n<style scoped>\n</style>"]}]}